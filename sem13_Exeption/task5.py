# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á–∏ 3 –∏ 4. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã:
# üìå –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –∑–∞–¥–∞–Ω–∏—è 4)
# üìå –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É - —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–ª—è
# –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ
# –º–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
# –¥–æ—Å—Ç—É–ø–∞. –ê –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –∏–∑
# –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# üìå –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –º–µ–Ω—å—à–µ, —á–µ–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞.
import json
from typing import Set
from task3_4 import ErrorLevel, ErrorAccess
from task4 import User


class Project:
    def __init__(self, json_file_path: str):
        self.admin_user = None
        self.access_level = None
        self.json_file_path = json_file_path
        self.users = self.load_users()

    def __str__(self):
        return f"{self.users}, {self.admin_user =} {self.access_level =}"

    def load_users(self) -> Set[User]:
        with open(self.json_file_path, 'r', encoding='utf-8') as json_file:
            data = json.load(json_file)
        users_set = set()

        for user in data:
            users_set.add(User(user['name'], user['user_id'], user['access_level']))
        return users_set

    def entrance(self, name: str, user_id: int):
        test_user = User(name, user_id, 0)
        if test_user in self.users:
            for user in self.users:
                if test_user == user:
                    self.admin_user = user
        else:
            raise ErrorAccess(name, user_id)

    def add_user(self, name: str, user_id: int, user_level: int):
        if user_level > self.admin_user.user_level:
            raise ErrorLevel(self.admin_user, user_level)
        new_user = User(name, user_id, user_level)
        self.users.add(new_user)
        self.save_users()

    def save_users(self):
        user_dict = []
        with open(self.json_file_path, 'w', encoding='utf-8') as json_file:
            for user in self.users:
                user_dict.append({"name": user.name, 'user_id': user.user_id, 'access_level': user.user_level})
                print(user)
            json.dump(user_dict, json_file, indent=2, ensure_ascii=False)
            print(user_dict)


if __name__ == '__main__':
    my_project = Project("users.json")
    my_project.entrance("–í–ª–∞–¥", 4)
    my_project.add_user("–°–µ–±–∞—Å—ä—Ç—å—è–Ω", 23, 10)
    print(*my_project.users)
